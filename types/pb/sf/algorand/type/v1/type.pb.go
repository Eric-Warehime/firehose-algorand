// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: sf/algorand/type/v1/type.proto

package pbalgorand

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueDelta_DeltaAction int32

const (
	ValueDelta_SetBytesAction ValueDelta_DeltaAction = 0
	ValueDelta_SetUintAction  ValueDelta_DeltaAction = 1
	ValueDelta_DeleteAction   ValueDelta_DeltaAction = 2
)

// Enum value maps for ValueDelta_DeltaAction.
var (
	ValueDelta_DeltaAction_name = map[int32]string{
		0: "SetBytesAction",
		1: "SetUintAction",
		2: "DeleteAction",
	}
	ValueDelta_DeltaAction_value = map[string]int32{
		"SetBytesAction": 0,
		"SetUintAction":  1,
		"DeleteAction":   2,
	}
)

func (x ValueDelta_DeltaAction) Enum() *ValueDelta_DeltaAction {
	p := new(ValueDelta_DeltaAction)
	*p = x
	return p
}

func (x ValueDelta_DeltaAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueDelta_DeltaAction) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_algorand_type_v1_type_proto_enumTypes[0].Descriptor()
}

func (ValueDelta_DeltaAction) Type() protoreflect.EnumType {
	return &file_sf_algorand_type_v1_type_proto_enumTypes[0]
}

func (x ValueDelta_DeltaAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueDelta_DeltaAction.Descriptor instead.
func (ValueDelta_DeltaAction) EnumDescriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{8, 0}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BlockHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*SignedTxnInBlock `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetTransactions() []*SignedTxnInBlock {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rnd  uint64 `protobuf:"varint,1,opt,name=rnd,proto3" json:"rnd,omitempty"`
	Prev string `protobuf:"bytes,2,opt,name=prev,proto3" json:"prev,omitempty"`
	Seed []byte `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
	// TxnCommitments
	Txn    []byte `protobuf:"bytes,5,opt,name=txn,proto3" json:"txn,omitempty"`
	Txn256 []byte `protobuf:"bytes,6,opt,name=txn256,proto3" json:"txn256,omitempty"`
	// timestamp
	Ts  int64  `protobuf:"varint,7,opt,name=ts,proto3" json:"ts,omitempty"`
	Gen string `protobuf:"bytes,8,opt,name=gen,proto3" json:"gen,omitempty"`
	// genesisHash
	Gh []byte `protobuf:"bytes,9,opt,name=gh,proto3" json:"gh,omitempty"`
	// RewardsState
	Fees   string `protobuf:"bytes,10,opt,name=fees,proto3" json:"fees,omitempty"`
	Rwd    string `protobuf:"bytes,11,opt,name=rwd,proto3" json:"rwd,omitempty"`
	Earn   uint64 `protobuf:"varint,12,opt,name=earn,proto3" json:"earn,omitempty"`
	Rate   uint64 `protobuf:"varint,13,opt,name=rate,proto3" json:"rate,omitempty"`
	Frac   uint64 `protobuf:"varint,14,opt,name=frac,proto3" json:"frac,omitempty"`
	Rwcalr uint64 `protobuf:"varint,15,opt,name=rwcalr,proto3" json:"rwcalr,omitempty"`
	// UpgradeState
	Proto      string `protobuf:"bytes,16,opt,name=proto,proto3" json:"proto,omitempty"`
	Nextproto  string `protobuf:"bytes,17,opt,name=nextproto,proto3" json:"nextproto,omitempty"`
	Nextyes    uint64 `protobuf:"varint,18,opt,name=nextyes,proto3" json:"nextyes,omitempty"`
	Nextbefore uint64 `protobuf:"varint,19,opt,name=nextbefore,proto3" json:"nextbefore,omitempty"`
	Nextswitch uint64 `protobuf:"varint,20,opt,name=nextswitch,proto3" json:"nextswitch,omitempty"`
	// UpgradeVote
	Upgradeprop  string                                         `protobuf:"bytes,21,opt,name=upgradeprop,proto3" json:"upgradeprop,omitempty"`
	Upgradedelay uint64                                         `protobuf:"varint,22,opt,name=upgradedelay,proto3" json:"upgradedelay,omitempty"`
	Upgradeyes   bool                                           `protobuf:"varint,23,opt,name=upgradeyes,proto3" json:"upgradeyes,omitempty"`
	Tc           uint64                                         `protobuf:"varint,24,opt,name=tc,proto3" json:"tc,omitempty"`
	Spt          map[uint64]*BlockHeader_StateProofTrackingData `protobuf:"bytes,25,rep,name=spt,proto3" json:"spt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ParticipationUpdates
	Partupdrmv [][]byte `protobuf:"bytes,26,rep,name=partupdrmv,proto3" json:"partupdrmv,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{1}
}

func (x *BlockHeader) GetRnd() uint64 {
	if x != nil {
		return x.Rnd
	}
	return 0
}

func (x *BlockHeader) GetPrev() string {
	if x != nil {
		return x.Prev
	}
	return ""
}

func (x *BlockHeader) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *BlockHeader) GetTxn() []byte {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *BlockHeader) GetTxn256() []byte {
	if x != nil {
		return x.Txn256
	}
	return nil
}

func (x *BlockHeader) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *BlockHeader) GetGen() string {
	if x != nil {
		return x.Gen
	}
	return ""
}

func (x *BlockHeader) GetGh() []byte {
	if x != nil {
		return x.Gh
	}
	return nil
}

func (x *BlockHeader) GetFees() string {
	if x != nil {
		return x.Fees
	}
	return ""
}

func (x *BlockHeader) GetRwd() string {
	if x != nil {
		return x.Rwd
	}
	return ""
}

func (x *BlockHeader) GetEarn() uint64 {
	if x != nil {
		return x.Earn
	}
	return 0
}

func (x *BlockHeader) GetRate() uint64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *BlockHeader) GetFrac() uint64 {
	if x != nil {
		return x.Frac
	}
	return 0
}

func (x *BlockHeader) GetRwcalr() uint64 {
	if x != nil {
		return x.Rwcalr
	}
	return 0
}

func (x *BlockHeader) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *BlockHeader) GetNextproto() string {
	if x != nil {
		return x.Nextproto
	}
	return ""
}

func (x *BlockHeader) GetNextyes() uint64 {
	if x != nil {
		return x.Nextyes
	}
	return 0
}

func (x *BlockHeader) GetNextbefore() uint64 {
	if x != nil {
		return x.Nextbefore
	}
	return 0
}

func (x *BlockHeader) GetNextswitch() uint64 {
	if x != nil {
		return x.Nextswitch
	}
	return 0
}

func (x *BlockHeader) GetUpgradeprop() string {
	if x != nil {
		return x.Upgradeprop
	}
	return ""
}

func (x *BlockHeader) GetUpgradedelay() uint64 {
	if x != nil {
		return x.Upgradedelay
	}
	return 0
}

func (x *BlockHeader) GetUpgradeyes() bool {
	if x != nil {
		return x.Upgradeyes
	}
	return false
}

func (x *BlockHeader) GetTc() uint64 {
	if x != nil {
		return x.Tc
	}
	return 0
}

func (x *BlockHeader) GetSpt() map[uint64]*BlockHeader_StateProofTrackingData {
	if x != nil {
		return x.Spt
	}
	return nil
}

func (x *BlockHeader) GetPartupdrmv() [][]byte {
	if x != nil {
		return x.Partupdrmv
	}
	return nil
}

type SignedTxnWithAD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stxnad *SignedTxnWithAD `protobuf:"bytes,1,opt,name=stxnad,proto3" json:"stxnad,omitempty"`
	Txn    *SignedTxn       `protobuf:"bytes,2,opt,name=txn,proto3" json:"txn,omitempty"`
	Ad     *ApplyData       `protobuf:"bytes,3,opt,name=ad,proto3" json:"ad,omitempty"`
}

func (x *SignedTxnWithAD) Reset() {
	*x = SignedTxnWithAD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTxnWithAD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTxnWithAD) ProtoMessage() {}

func (x *SignedTxnWithAD) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTxnWithAD.ProtoReflect.Descriptor instead.
func (*SignedTxnWithAD) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *SignedTxnWithAD) GetStxnad() *SignedTxnWithAD {
	if x != nil {
		return x.Stxnad
	}
	return nil
}

func (x *SignedTxnWithAD) GetTxn() *SignedTxn {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *SignedTxnWithAD) GetAd() *ApplyData {
	if x != nil {
		return x.Ad
	}
	return nil
}

type SignedTxnInBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasGenesisID   bool `protobuf:"varint,1,opt,name=hasGenesisID,proto3" json:"hasGenesisID,omitempty"`
	HasGenesisHash bool `protobuf:"varint,2,opt,name=hasGenesisHash,proto3" json:"hasGenesisHash,omitempty"`
}

func (x *SignedTxnInBlock) Reset() {
	*x = SignedTxnInBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTxnInBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTxnInBlock) ProtoMessage() {}

func (x *SignedTxnInBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTxnInBlock.ProtoReflect.Descriptor instead.
func (*SignedTxnInBlock) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{3}
}

func (x *SignedTxnInBlock) GetHasGenesisID() bool {
	if x != nil {
		return x.HasGenesisID
	}
	return false
}

func (x *SignedTxnInBlock) GetHasGenesisHash() bool {
	if x != nil {
		return x.HasGenesisHash
	}
	return false
}

type SignedTxn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sig      []byte       `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	MSig     *MultisigSig `protobuf:"bytes,2,opt,name=mSig,proto3" json:"mSig,omitempty"`
	LSig     *LogicSig    `protobuf:"bytes,3,opt,name=lSig,proto3" json:"lSig,omitempty"`
	Txn      *Transaction `protobuf:"bytes,4,opt,name=txn,proto3" json:"txn,omitempty"`
	AuthAddr []byte       `protobuf:"bytes,5,opt,name=authAddr,proto3" json:"authAddr,omitempty"`
}

func (x *SignedTxn) Reset() {
	*x = SignedTxn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTxn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTxn) ProtoMessage() {}

func (x *SignedTxn) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTxn.ProtoReflect.Descriptor instead.
func (*SignedTxn) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{4}
}

func (x *SignedTxn) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *SignedTxn) GetMSig() *MultisigSig {
	if x != nil {
		return x.MSig
	}
	return nil
}

func (x *SignedTxn) GetLSig() *LogicSig {
	if x != nil {
		return x.LSig
	}
	return nil
}

func (x *SignedTxn) GetTxn() *Transaction {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *SignedTxn) GetAuthAddr() []byte {
	if x != nil {
		return x.AuthAddr
	}
	return nil
}

type ApplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClosingAmount      uint64     `protobuf:"varint,1,opt,name=closingAmount,proto3" json:"closingAmount,omitempty"`
	AssetClosingAmount uint64     `protobuf:"varint,2,opt,name=assetClosingAmount,proto3" json:"assetClosingAmount,omitempty"`
	SenderRewards      uint64     `protobuf:"varint,3,opt,name=senderRewards,proto3" json:"senderRewards,omitempty"`
	ReceiverRewards    uint64     `protobuf:"varint,4,opt,name=receiverRewards,proto3" json:"receiverRewards,omitempty"`
	CloseRewards       uint64     `protobuf:"varint,5,opt,name=closeRewards,proto3" json:"closeRewards,omitempty"`
	EvalDelta          *EvalDelta `protobuf:"bytes,6,opt,name=evalDelta,proto3" json:"evalDelta,omitempty"`
	ConfigAsset        uint64     `protobuf:"varint,7,opt,name=configAsset,proto3" json:"configAsset,omitempty"`
	ApplicationId      uint64     `protobuf:"varint,8,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
}

func (x *ApplyData) Reset() {
	*x = ApplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyData) ProtoMessage() {}

func (x *ApplyData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyData.ProtoReflect.Descriptor instead.
func (*ApplyData) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyData) GetClosingAmount() uint64 {
	if x != nil {
		return x.ClosingAmount
	}
	return 0
}

func (x *ApplyData) GetAssetClosingAmount() uint64 {
	if x != nil {
		return x.AssetClosingAmount
	}
	return 0
}

func (x *ApplyData) GetSenderRewards() uint64 {
	if x != nil {
		return x.SenderRewards
	}
	return 0
}

func (x *ApplyData) GetReceiverRewards() uint64 {
	if x != nil {
		return x.ReceiverRewards
	}
	return 0
}

func (x *ApplyData) GetCloseRewards() uint64 {
	if x != nil {
		return x.CloseRewards
	}
	return 0
}

func (x *ApplyData) GetEvalDelta() *EvalDelta {
	if x != nil {
		return x.EvalDelta
	}
	return nil
}

func (x *ApplyData) GetConfigAsset() uint64 {
	if x != nil {
		return x.ConfigAsset
	}
	return 0
}

func (x *ApplyData) GetApplicationId() uint64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

type StateDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta map[string]*ValueDelta `protobuf:"bytes,1,rep,name=delta,proto3" json:"delta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StateDelta) Reset() {
	*x = StateDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDelta) ProtoMessage() {}

func (x *StateDelta) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDelta.ProtoReflect.Descriptor instead.
func (*StateDelta) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{6}
}

func (x *StateDelta) GetDelta() map[string]*ValueDelta {
	if x != nil {
		return x.Delta
	}
	return nil
}

type EvalDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalDelta *StateDelta            `protobuf:"bytes,1,opt,name=globalDelta,proto3" json:"globalDelta,omitempty"`
	LocalDeltas map[uint64]*StateDelta `protobuf:"bytes,2,rep,name=localDeltas,proto3" json:"localDeltas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs        []string               `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	InnerTxns   []*SignedTxnWithAD     `protobuf:"bytes,4,rep,name=innerTxns,proto3" json:"innerTxns,omitempty"`
}

func (x *EvalDelta) Reset() {
	*x = EvalDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalDelta) ProtoMessage() {}

func (x *EvalDelta) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalDelta.ProtoReflect.Descriptor instead.
func (*EvalDelta) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{7}
}

func (x *EvalDelta) GetGlobalDelta() *StateDelta {
	if x != nil {
		return x.GlobalDelta
	}
	return nil
}

func (x *EvalDelta) GetLocalDeltas() map[uint64]*StateDelta {
	if x != nil {
		return x.LocalDeltas
	}
	return nil
}

func (x *EvalDelta) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *EvalDelta) GetInnerTxns() []*SignedTxnWithAD {
	if x != nil {
		return x.InnerTxns
	}
	return nil
}

type ValueDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action ValueDelta_DeltaAction `protobuf:"varint,1,opt,name=action,proto3,enum=sf.algorand.type.v1.ValueDelta_DeltaAction" json:"action,omitempty"`
	Bytes  string                 `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Uint   uint64                 `protobuf:"varint,3,opt,name=uint,proto3" json:"uint,omitempty"`
}

func (x *ValueDelta) Reset() {
	*x = ValueDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueDelta) ProtoMessage() {}

func (x *ValueDelta) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueDelta.ProtoReflect.Descriptor instead.
func (*ValueDelta) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{8}
}

func (x *ValueDelta) GetAction() ValueDelta_DeltaAction {
	if x != nil {
		return x.Action
	}
	return ValueDelta_SetBytesAction
}

func (x *ValueDelta) GetBytes() string {
	if x != nil {
		return x.Bytes
	}
	return ""
}

func (x *ValueDelta) GetUint() uint64 {
	if x != nil {
		return x.Uint
	}
	return 0
}

type LogicSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logic [][]byte     `protobuf:"bytes,1,rep,name=logic,proto3" json:"logic,omitempty"`
	Sig   []byte       `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	Msig  *MultisigSig `protobuf:"bytes,3,opt,name=msig,proto3" json:"msig,omitempty"`
	Args  [][]byte     `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *LogicSig) Reset() {
	*x = LogicSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicSig) ProtoMessage() {}

func (x *LogicSig) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicSig.ProtoReflect.Descriptor instead.
func (*LogicSig) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{9}
}

func (x *LogicSig) GetLogic() [][]byte {
	if x != nil {
		return x.Logic
	}
	return nil
}

func (x *LogicSig) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *LogicSig) GetMsig() *MultisigSig {
	if x != nil {
		return x.Msig
	}
	return nil
}

func (x *LogicSig) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type MultisigSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   uint32                        `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Threshold uint32                        `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Subsigs   []*MultisigSig_MultisigSubsig `protobuf:"bytes,3,rep,name=subsigs,proto3" json:"subsigs,omitempty"`
}

func (x *MultisigSig) Reset() {
	*x = MultisigSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisigSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisigSig) ProtoMessage() {}

func (x *MultisigSig) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisigSig.ProtoReflect.Descriptor instead.
func (*MultisigSig) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{10}
}

func (x *MultisigSig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MultisigSig) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *MultisigSig) GetSubsigs() []*MultisigSig_MultisigSubsig {
	if x != nil {
		return x.Subsigs
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header
	Sender      []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Fee         uint64 `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	FirstValid  uint64 `protobuf:"varint,3,opt,name=firstValid,proto3" json:"firstValid,omitempty"`
	LastValid   uint64 `protobuf:"varint,4,opt,name=lastValid,proto3" json:"lastValid,omitempty"`
	Note        []byte `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	GenesisId   string `protobuf:"bytes,6,opt,name=genesisId,proto3" json:"genesisId,omitempty"`
	GenesisHash []byte `protobuf:"bytes,7,opt,name=genesisHash,proto3" json:"genesisHash,omitempty"`
	Group       []byte `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	Lease       []byte `protobuf:"bytes,9,opt,name=lease,proto3" json:"lease,omitempty"`
	RekeyTo     []byte `protobuf:"bytes,10,opt,name=rekeyTo,proto3" json:"rekeyTo,omitempty"`
	// KeyregTxnFields
	VotePK           []byte `protobuf:"bytes,11,opt,name=votePK,proto3" json:"votePK,omitempty"`
	SelectionPK      []byte `protobuf:"bytes,12,opt,name=selectionPK,proto3" json:"selectionPK,omitempty"`
	StateProofPK     []byte `protobuf:"bytes,13,opt,name=stateProofPK,proto3" json:"stateProofPK,omitempty"`
	VoteFirst        uint64 `protobuf:"varint,14,opt,name=voteFirst,proto3" json:"voteFirst,omitempty"`
	VoteLast         uint64 `protobuf:"varint,15,opt,name=voteLast,proto3" json:"voteLast,omitempty"`
	VoteKeyDilution  uint64 `protobuf:"varint,16,opt,name=voteKeyDilution,proto3" json:"voteKeyDilution,omitempty"`
	Nonparticipation bool   `protobuf:"varint,17,opt,name=nonparticipation,proto3" json:"nonparticipation,omitempty"`
	// PaymentTxnFields
	Receiver         []byte `protobuf:"bytes,18,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amount           uint64 `protobuf:"varint,19,opt,name=amount,proto3" json:"amount,omitempty"`
	CloseRemainderTo []byte `protobuf:"bytes,20,opt,name=closeRemainderTo,proto3" json:"closeRemainderTo,omitempty"`
	// AssetConfigTxnFields
	ConfigAsset uint64       `protobuf:"varint,21,opt,name=configAsset,proto3" json:"configAsset,omitempty"`
	AssetParams *AssetParams `protobuf:"bytes,22,opt,name=assetParams,proto3" json:"assetParams,omitempty"`
	// AssetTransferTxnFields
	XferAsset     uint64 `protobuf:"varint,23,opt,name=xferAsset,proto3" json:"xferAsset,omitempty"`
	AssetAmount   uint64 `protobuf:"varint,24,opt,name=assetAmount,proto3" json:"assetAmount,omitempty"`
	AssetSender   []byte `protobuf:"bytes,25,opt,name=assetSender,proto3" json:"assetSender,omitempty"`
	AssetReceiver []byte `protobuf:"bytes,26,opt,name=assetReceiver,proto3" json:"assetReceiver,omitempty"`
	AssetCloseTo  []byte `protobuf:"bytes,27,opt,name=assetCloseTo,proto3" json:"assetCloseTo,omitempty"`
	// AssetFreezeTxnFields
	FreezeAccount []byte `protobuf:"bytes,28,opt,name=freezeAccount,proto3" json:"freezeAccount,omitempty"`
	FreezeAsset   uint64 `protobuf:"varint,29,opt,name=freezeAsset,proto3" json:"freezeAsset,omitempty"`
	AssetFrozen   bool   `protobuf:"varint,30,opt,name=assetFrozen,proto3" json:"assetFrozen,omitempty"`
	// ApplicationCallTxnFields
	ApplicationId     uint64                   `protobuf:"varint,31,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	OnCompletion      uint64                   `protobuf:"varint,32,opt,name=onCompletion,proto3" json:"onCompletion,omitempty"`
	ApplicationArgs   [][]byte                 `protobuf:"bytes,33,rep,name=applicationArgs,proto3" json:"applicationArgs,omitempty"`
	Accounts          [][]byte                 `protobuf:"bytes,34,rep,name=accounts,proto3" json:"accounts,omitempty"`
	ForeignApps       []uint64                 `protobuf:"varint,35,rep,packed,name=foreignApps,proto3" json:"foreignApps,omitempty"`
	Boxes             []*Transaction_BoxRef    `protobuf:"bytes,36,rep,name=boxes,proto3" json:"boxes,omitempty"`
	ForeignAssets     []uint64                 `protobuf:"varint,37,rep,packed,name=foreignAssets,proto3" json:"foreignAssets,omitempty"`
	LocalStateSchema  *Transaction_StateSchema `protobuf:"bytes,38,opt,name=localStateSchema,proto3" json:"localStateSchema,omitempty"`
	GlobalStateSchema *Transaction_StateSchema `protobuf:"bytes,39,opt,name=globalStateSchema,proto3" json:"globalStateSchema,omitempty"`
	ApprovalProgram   []byte                   `protobuf:"bytes,40,opt,name=approvalProgram,proto3" json:"approvalProgram,omitempty"`
	ClearStateProgram []byte                   `protobuf:"bytes,41,opt,name=clearStateProgram,proto3" json:"clearStateProgram,omitempty"`
	ExtraProgramPages uint32                   `protobuf:"varint,42,opt,name=extraProgramPages,proto3" json:"extraProgramPages,omitempty"`
	// StateProofTxnFields
	StateProofType uint64                  `protobuf:"varint,43,opt,name=stateProofType,proto3" json:"stateProofType,omitempty"`
	StateProof     *Transaction_StateProof `protobuf:"bytes,44,opt,name=stateProof,proto3" json:"stateProof,omitempty"`
	Message        *Transaction_Message    `protobuf:"bytes,45,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11}
}

func (x *Transaction) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Transaction) GetFirstValid() uint64 {
	if x != nil {
		return x.FirstValid
	}
	return 0
}

func (x *Transaction) GetLastValid() uint64 {
	if x != nil {
		return x.LastValid
	}
	return 0
}

func (x *Transaction) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Transaction) GetGenesisId() string {
	if x != nil {
		return x.GenesisId
	}
	return ""
}

func (x *Transaction) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *Transaction) GetGroup() []byte {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Transaction) GetLease() []byte {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *Transaction) GetRekeyTo() []byte {
	if x != nil {
		return x.RekeyTo
	}
	return nil
}

func (x *Transaction) GetVotePK() []byte {
	if x != nil {
		return x.VotePK
	}
	return nil
}

func (x *Transaction) GetSelectionPK() []byte {
	if x != nil {
		return x.SelectionPK
	}
	return nil
}

func (x *Transaction) GetStateProofPK() []byte {
	if x != nil {
		return x.StateProofPK
	}
	return nil
}

func (x *Transaction) GetVoteFirst() uint64 {
	if x != nil {
		return x.VoteFirst
	}
	return 0
}

func (x *Transaction) GetVoteLast() uint64 {
	if x != nil {
		return x.VoteLast
	}
	return 0
}

func (x *Transaction) GetVoteKeyDilution() uint64 {
	if x != nil {
		return x.VoteKeyDilution
	}
	return 0
}

func (x *Transaction) GetNonparticipation() bool {
	if x != nil {
		return x.Nonparticipation
	}
	return false
}

func (x *Transaction) GetReceiver() []byte {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *Transaction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetCloseRemainderTo() []byte {
	if x != nil {
		return x.CloseRemainderTo
	}
	return nil
}

func (x *Transaction) GetConfigAsset() uint64 {
	if x != nil {
		return x.ConfigAsset
	}
	return 0
}

func (x *Transaction) GetAssetParams() *AssetParams {
	if x != nil {
		return x.AssetParams
	}
	return nil
}

func (x *Transaction) GetXferAsset() uint64 {
	if x != nil {
		return x.XferAsset
	}
	return 0
}

func (x *Transaction) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *Transaction) GetAssetSender() []byte {
	if x != nil {
		return x.AssetSender
	}
	return nil
}

func (x *Transaction) GetAssetReceiver() []byte {
	if x != nil {
		return x.AssetReceiver
	}
	return nil
}

func (x *Transaction) GetAssetCloseTo() []byte {
	if x != nil {
		return x.AssetCloseTo
	}
	return nil
}

func (x *Transaction) GetFreezeAccount() []byte {
	if x != nil {
		return x.FreezeAccount
	}
	return nil
}

func (x *Transaction) GetFreezeAsset() uint64 {
	if x != nil {
		return x.FreezeAsset
	}
	return 0
}

func (x *Transaction) GetAssetFrozen() bool {
	if x != nil {
		return x.AssetFrozen
	}
	return false
}

func (x *Transaction) GetApplicationId() uint64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *Transaction) GetOnCompletion() uint64 {
	if x != nil {
		return x.OnCompletion
	}
	return 0
}

func (x *Transaction) GetApplicationArgs() [][]byte {
	if x != nil {
		return x.ApplicationArgs
	}
	return nil
}

func (x *Transaction) GetAccounts() [][]byte {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Transaction) GetForeignApps() []uint64 {
	if x != nil {
		return x.ForeignApps
	}
	return nil
}

func (x *Transaction) GetBoxes() []*Transaction_BoxRef {
	if x != nil {
		return x.Boxes
	}
	return nil
}

func (x *Transaction) GetForeignAssets() []uint64 {
	if x != nil {
		return x.ForeignAssets
	}
	return nil
}

func (x *Transaction) GetLocalStateSchema() *Transaction_StateSchema {
	if x != nil {
		return x.LocalStateSchema
	}
	return nil
}

func (x *Transaction) GetGlobalStateSchema() *Transaction_StateSchema {
	if x != nil {
		return x.GlobalStateSchema
	}
	return nil
}

func (x *Transaction) GetApprovalProgram() []byte {
	if x != nil {
		return x.ApprovalProgram
	}
	return nil
}

func (x *Transaction) GetClearStateProgram() []byte {
	if x != nil {
		return x.ClearStateProgram
	}
	return nil
}

func (x *Transaction) GetExtraProgramPages() uint32 {
	if x != nil {
		return x.ExtraProgramPages
	}
	return 0
}

func (x *Transaction) GetStateProofType() uint64 {
	if x != nil {
		return x.StateProofType
	}
	return 0
}

func (x *Transaction) GetStateProof() *Transaction_StateProof {
	if x != nil {
		return x.StateProof
	}
	return nil
}

func (x *Transaction) GetMessage() *Transaction_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type AssetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Decimals      uint32 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	DefaultFrozen bool   `protobuf:"varint,3,opt,name=defaultFrozen,proto3" json:"defaultFrozen,omitempty"`
	UnitName      string `protobuf:"bytes,4,opt,name=unitName,proto3" json:"unitName,omitempty"`
	AssetName     string `protobuf:"bytes,5,opt,name=assetName,proto3" json:"assetName,omitempty"`
	Url           string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	MetadataHash  []byte `protobuf:"bytes,7,opt,name=metadataHash,proto3" json:"metadataHash,omitempty"`
	Manager       []byte `protobuf:"bytes,8,opt,name=manager,proto3" json:"manager,omitempty"`
	Reserve       []byte `protobuf:"bytes,9,opt,name=reserve,proto3" json:"reserve,omitempty"`
	Freeze        []byte `protobuf:"bytes,10,opt,name=freeze,proto3" json:"freeze,omitempty"`
	Clawback      []byte `protobuf:"bytes,11,opt,name=clawback,proto3" json:"clawback,omitempty"`
}

func (x *AssetParams) Reset() {
	*x = AssetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetParams) ProtoMessage() {}

func (x *AssetParams) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetParams.ProtoReflect.Descriptor instead.
func (*AssetParams) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{12}
}

func (x *AssetParams) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AssetParams) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *AssetParams) GetDefaultFrozen() bool {
	if x != nil {
		return x.DefaultFrozen
	}
	return false
}

func (x *AssetParams) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *AssetParams) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *AssetParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AssetParams) GetMetadataHash() []byte {
	if x != nil {
		return x.MetadataHash
	}
	return nil
}

func (x *AssetParams) GetManager() []byte {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *AssetParams) GetReserve() []byte {
	if x != nil {
		return x.Reserve
	}
	return nil
}

func (x *AssetParams) GetFreeze() []byte {
	if x != nil {
		return x.Freeze
	}
	return nil
}

func (x *AssetParams) GetClawback() []byte {
	if x != nil {
		return x.Clawback
	}
	return nil
}

type BlockHeader_StateProofTrackingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateProofVotersCommitment  []byte `protobuf:"bytes,27,opt,name=stateProofVotersCommitment,proto3" json:"stateProofVotersCommitment,omitempty"`
	StateProofOnlineTotalWeight uint64 `protobuf:"varint,28,opt,name=stateProofOnlineTotalWeight,proto3" json:"stateProofOnlineTotalWeight,omitempty"`
	StateProofNextRound         uint64 `protobuf:"varint,29,opt,name=stateProofNextRound,proto3" json:"stateProofNextRound,omitempty"`
}

func (x *BlockHeader_StateProofTrackingData) Reset() {
	*x = BlockHeader_StateProofTrackingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader_StateProofTrackingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader_StateProofTrackingData) ProtoMessage() {}

func (x *BlockHeader_StateProofTrackingData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader_StateProofTrackingData.ProtoReflect.Descriptor instead.
func (*BlockHeader_StateProofTrackingData) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{1, 1}
}

func (x *BlockHeader_StateProofTrackingData) GetStateProofVotersCommitment() []byte {
	if x != nil {
		return x.StateProofVotersCommitment
	}
	return nil
}

func (x *BlockHeader_StateProofTrackingData) GetStateProofOnlineTotalWeight() uint64 {
	if x != nil {
		return x.StateProofOnlineTotalWeight
	}
	return 0
}

func (x *BlockHeader_StateProofTrackingData) GetStateProofNextRound() uint64 {
	if x != nil {
		return x.StateProofNextRound
	}
	return 0
}

type MultisigSig_MultisigSubsig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *MultisigSig_MultisigSubsig) Reset() {
	*x = MultisigSig_MultisigSubsig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisigSig_MultisigSubsig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisigSig_MultisigSubsig) ProtoMessage() {}

func (x *MultisigSig_MultisigSubsig) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisigSig_MultisigSubsig.ProtoReflect.Descriptor instead.
func (*MultisigSig_MultisigSubsig) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{10, 0}
}

func (x *MultisigSig_MultisigSubsig) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MultisigSig_MultisigSubsig) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type Transaction_StateSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumUint      uint64 `protobuf:"varint,1,opt,name=numUint,proto3" json:"numUint,omitempty"`
	NumByteSlice uint64 `protobuf:"varint,2,opt,name=numByteSlice,proto3" json:"numByteSlice,omitempty"`
}

func (x *Transaction_StateSchema) Reset() {
	*x = Transaction_StateSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_StateSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_StateSchema) ProtoMessage() {}

func (x *Transaction_StateSchema) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_StateSchema.ProtoReflect.Descriptor instead.
func (*Transaction_StateSchema) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Transaction_StateSchema) GetNumUint() uint64 {
	if x != nil {
		return x.NumUint
	}
	return 0
}

func (x *Transaction_StateSchema) GetNumByteSlice() uint64 {
	if x != nil {
		return x.NumByteSlice
	}
	return 0
}

type Transaction_BoxRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Name  []byte `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Transaction_BoxRef) Reset() {
	*x = Transaction_BoxRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_BoxRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_BoxRef) ProtoMessage() {}

func (x *Transaction_BoxRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_BoxRef.ProtoReflect.Descriptor instead.
func (*Transaction_BoxRef) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 1}
}

func (x *Transaction_BoxRef) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transaction_BoxRef) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type Transaction_StateProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigCommit                  []byte                         `protobuf:"bytes,1,opt,name=sigCommit,proto3" json:"sigCommit,omitempty"`
	SignedWeight               uint64                         `protobuf:"varint,2,opt,name=signedWeight,proto3" json:"signedWeight,omitempty"`
	SigProofs                  *Transaction_Proof             `protobuf:"bytes,3,opt,name=sigProofs,proto3" json:"sigProofs,omitempty"`
	PartProofs                 *Transaction_Proof             `protobuf:"bytes,4,opt,name=partProofs,proto3" json:"partProofs,omitempty"`
	MerkleSignatureSaltVersion []byte                         `protobuf:"bytes,5,opt,name=merkleSignatureSaltVersion,proto3" json:"merkleSignatureSaltVersion,omitempty"`
	Reveals                    map[uint64]*Transaction_Reveal `protobuf:"bytes,6,rep,name=reveals,proto3" json:"reveals,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PositionsToReveal          []uint64                       `protobuf:"varint,7,rep,packed,name=positionsToReveal,proto3" json:"positionsToReveal,omitempty"`
}

func (x *Transaction_StateProof) Reset() {
	*x = Transaction_StateProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_StateProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_StateProof) ProtoMessage() {}

func (x *Transaction_StateProof) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_StateProof.ProtoReflect.Descriptor instead.
func (*Transaction_StateProof) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 2}
}

func (x *Transaction_StateProof) GetSigCommit() []byte {
	if x != nil {
		return x.SigCommit
	}
	return nil
}

func (x *Transaction_StateProof) GetSignedWeight() uint64 {
	if x != nil {
		return x.SignedWeight
	}
	return 0
}

func (x *Transaction_StateProof) GetSigProofs() *Transaction_Proof {
	if x != nil {
		return x.SigProofs
	}
	return nil
}

func (x *Transaction_StateProof) GetPartProofs() *Transaction_Proof {
	if x != nil {
		return x.PartProofs
	}
	return nil
}

func (x *Transaction_StateProof) GetMerkleSignatureSaltVersion() []byte {
	if x != nil {
		return x.MerkleSignatureSaltVersion
	}
	return nil
}

func (x *Transaction_StateProof) GetReveals() map[uint64]*Transaction_Reveal {
	if x != nil {
		return x.Reveals
	}
	return nil
}

func (x *Transaction_StateProof) GetPositionsToReveal() []uint64 {
	if x != nil {
		return x.PositionsToReveal
	}
	return nil
}

type Transaction_Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      [][]byte `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	HashType  uint32   `protobuf:"varint,2,opt,name=hashType,proto3" json:"hashType,omitempty"`
	TreeDepth uint32   `protobuf:"varint,3,opt,name=treeDepth,proto3" json:"treeDepth,omitempty"`
}

func (x *Transaction_Proof) Reset() {
	*x = Transaction_Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Proof) ProtoMessage() {}

func (x *Transaction_Proof) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Proof.ProtoReflect.Descriptor instead.
func (*Transaction_Proof) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 3}
}

func (x *Transaction_Proof) GetPath() [][]byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Transaction_Proof) GetHashType() uint32 {
	if x != nil {
		return x.HashType
	}
	return 0
}

func (x *Transaction_Proof) GetTreeDepth() uint32 {
	if x != nil {
		return x.TreeDepth
	}
	return 0
}

type Transaction_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeadersCommitment []byte `protobuf:"bytes,1,opt,name=blockHeadersCommitment,proto3" json:"blockHeadersCommitment,omitempty"`
	VotersCommitment       []byte `protobuf:"bytes,2,opt,name=votersCommitment,proto3" json:"votersCommitment,omitempty"`
	LnProvenWeight         uint64 `protobuf:"varint,3,opt,name=lnProvenWeight,proto3" json:"lnProvenWeight,omitempty"`
	FirstAttestedRound     uint64 `protobuf:"varint,4,opt,name=firstAttestedRound,proto3" json:"firstAttestedRound,omitempty"`
	LastAttestedRound      uint64 `protobuf:"varint,5,opt,name=lastAttestedRound,proto3" json:"lastAttestedRound,omitempty"`
}

func (x *Transaction_Message) Reset() {
	*x = Transaction_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Message) ProtoMessage() {}

func (x *Transaction_Message) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Message.ProtoReflect.Descriptor instead.
func (*Transaction_Message) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 4}
}

func (x *Transaction_Message) GetBlockHeadersCommitment() []byte {
	if x != nil {
		return x.BlockHeadersCommitment
	}
	return nil
}

func (x *Transaction_Message) GetVotersCommitment() []byte {
	if x != nil {
		return x.VotersCommitment
	}
	return nil
}

func (x *Transaction_Message) GetLnProvenWeight() uint64 {
	if x != nil {
		return x.LnProvenWeight
	}
	return 0
}

func (x *Transaction_Message) GetFirstAttestedRound() uint64 {
	if x != nil {
		return x.FirstAttestedRound
	}
	return 0
}

func (x *Transaction_Message) GetLastAttestedRound() uint64 {
	if x != nil {
		return x.LastAttestedRound
	}
	return 0
}

type Transaction_Reveal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigslotCommit *Transaction_SigSlotCommit `protobuf:"bytes,1,opt,name=sigslotCommit,proto3" json:"sigslotCommit,omitempty"`
	Part          *Transaction_Participant   `protobuf:"bytes,2,opt,name=part,proto3" json:"part,omitempty"`
}

func (x *Transaction_Reveal) Reset() {
	*x = Transaction_Reveal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Reveal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Reveal) ProtoMessage() {}

func (x *Transaction_Reveal) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Reveal.ProtoReflect.Descriptor instead.
func (*Transaction_Reveal) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 5}
}

func (x *Transaction_Reveal) GetSigslotCommit() *Transaction_SigSlotCommit {
	if x != nil {
		return x.SigslotCommit
	}
	return nil
}

func (x *Transaction_Reveal) GetPart() *Transaction_Participant {
	if x != nil {
		return x.Part
	}
	return nil
}

type Transaction_SigSlotCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sig *Transaction_MerkleSignature `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	L   uint64                       `protobuf:"varint,2,opt,name=l,proto3" json:"l,omitempty"`
}

func (x *Transaction_SigSlotCommit) Reset() {
	*x = Transaction_SigSlotCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_SigSlotCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_SigSlotCommit) ProtoMessage() {}

func (x *Transaction_SigSlotCommit) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_SigSlotCommit.ProtoReflect.Descriptor instead.
func (*Transaction_SigSlotCommit) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 6}
}

func (x *Transaction_SigSlotCommit) GetSig() *Transaction_MerkleSignature {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *Transaction_SigSlotCommit) GetL() uint64 {
	if x != nil {
		return x.L
	}
	return 0
}

type Transaction_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk     *Transaction_MerkleVerifier `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
	Weight uint64                      `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Transaction_Participant) Reset() {
	*x = Transaction_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Participant) ProtoMessage() {}

func (x *Transaction_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Participant.ProtoReflect.Descriptor instead.
func (*Transaction_Participant) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 7}
}

func (x *Transaction_Participant) GetPk() *Transaction_MerkleVerifier {
	if x != nil {
		return x.Pk
	}
	return nil
}

func (x *Transaction_Participant) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Transaction_MerkleSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FalconSignature       []byte             `protobuf:"bytes,1,opt,name=falconSignature,proto3" json:"falconSignature,omitempty"`
	VectorCommitmentIndex uint64             `protobuf:"varint,2,opt,name=vectorCommitmentIndex,proto3" json:"vectorCommitmentIndex,omitempty"`
	Proof                 *Transaction_Proof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	FalconPublicKey       []byte             `protobuf:"bytes,4,opt,name=falconPublicKey,proto3" json:"falconPublicKey,omitempty"`
}

func (x *Transaction_MerkleSignature) Reset() {
	*x = Transaction_MerkleSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_MerkleSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_MerkleSignature) ProtoMessage() {}

func (x *Transaction_MerkleSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_MerkleSignature.ProtoReflect.Descriptor instead.
func (*Transaction_MerkleSignature) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 8}
}

func (x *Transaction_MerkleSignature) GetFalconSignature() []byte {
	if x != nil {
		return x.FalconSignature
	}
	return nil
}

func (x *Transaction_MerkleSignature) GetVectorCommitmentIndex() uint64 {
	if x != nil {
		return x.VectorCommitmentIndex
	}
	return 0
}

func (x *Transaction_MerkleSignature) GetProof() *Transaction_Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Transaction_MerkleSignature) GetFalconPublicKey() []byte {
	if x != nil {
		return x.FalconPublicKey
	}
	return nil
}

type Transaction_MerkleVerifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment  []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	KeyLifetime uint64 `protobuf:"varint,2,opt,name=keyLifetime,proto3" json:"keyLifetime,omitempty"`
}

func (x *Transaction_MerkleVerifier) Reset() {
	*x = Transaction_MerkleVerifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_algorand_type_v1_type_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_MerkleVerifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_MerkleVerifier) ProtoMessage() {}

func (x *Transaction_MerkleVerifier) ProtoReflect() protoreflect.Message {
	mi := &file_sf_algorand_type_v1_type_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_MerkleVerifier.ProtoReflect.Descriptor instead.
func (*Transaction_MerkleVerifier) Descriptor() ([]byte, []int) {
	return file_sf_algorand_type_v1_type_proto_rawDescGZIP(), []int{11, 9}
}

func (x *Transaction_MerkleVerifier) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *Transaction_MerkleVerifier) GetKeyLifetime() uint64 {
	if x != nil {
		return x.KeyLifetime
	}
	return 0
}

var File_sf_algorand_type_v1_type_proto protoreflect.FileDescriptor

var file_sf_algorand_type_v1_type_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x66, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x49,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbe, 0x07, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x72, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x78, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x32, 0x35, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x78, 0x6e, 0x32, 0x35, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x77, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x77, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x65, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x61, 0x63,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x77, 0x63, 0x61, 0x6c, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x77,
	0x63, 0x61, 0x6c, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x79, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x79,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x70, 0x72, 0x6f,
	0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x70, 0x72, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x79, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x79, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x63, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x63, 0x12, 0x3b, 0x0a, 0x03, 0x73, 0x70, 0x74, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x73, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x75, 0x70, 0x64,
	0x72, 0x6d, 0x76, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x64, 0x72, 0x6d, 0x76, 0x1a, 0x6f, 0x0a, 0x08, 0x53, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcc, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56,
	0x6f, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x65, 0x78, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x78, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x44, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x78,
	0x6e, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x44, 0x52,
	0x06, 0x73, 0x74, 0x78, 0x6e, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x78, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x61, 0x64, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x61, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x53, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x69, 0x67, 0x52, 0x04, 0x6d, 0x53, 0x69, 0x67, 0x12,
	0x31, 0x0a, 0x04, 0x6c, 0x53, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x69, 0x67, 0x52, 0x04, 0x6c, 0x53,
	0x69, 0x67, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x22, 0xdb, 0x02, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x76,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x09, 0x65,
	0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x40, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x1a, 0x59, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x02, 0x0a,
	0x09, 0x45, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x51, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x78, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x44, 0x52, 0x09, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x78, 0x6e, 0x73, 0x1a, 0x5f, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x22,
	0x7c, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x73, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x53, 0x69, 0x67, 0x52, 0x04, 0x6d, 0x73, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xc6, 0x01,
	0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x69, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x69, 0x67, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x53, 0x75, 0x62, 0x73, 0x69, 0x67, 0x52, 0x07, 0x73, 0x75, 0x62, 0x73, 0x69, 0x67, 0x73,
	0x1a, 0x34, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x75, 0x62, 0x73,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0xd7, 0x1a, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65,
	0x50, 0x4b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x4b,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x4b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x4b, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x50, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x50, 0x4b, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f,
	0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x78, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x78, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x18,
	0x21, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x70, 0x70,
	0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x41, 0x70, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x24, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x66, 0x52, 0x05, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x5a, 0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x11, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x4b,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x42, 0x79,
	0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x1a, 0x32, 0x0a, 0x06, 0x42,
	0x6f, 0x78, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x83, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x44, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x3e,
	0x0a, 0x1a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x61, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x1a, 0x63, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x72, 0x65, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x1a, 0xf3, 0x01, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x1a, 0xa0, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x12, 0x54, 0x0a,
	0x0d, 0x73, 0x69, 0x67, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x04, 0x70, 0x61, 0x72, 0x74, 0x1a, 0x61, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x53, 0x6c, 0x6f, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x6c, 0x1a, 0x66, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x1a, 0xd9, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x66,
	0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x66, 0x61, 0x6c,
	0x63, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0x52, 0x0a, 0x0e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xbd, 0x02, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b,
	0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45,
	0x72, 0x69, 0x63, 0x2d, 0x57, 0x61, 0x72, 0x65, 0x68, 0x69, 0x6d, 0x65, 0x2f, 0x66, 0x69, 0x72,
	0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x61, 0x6e, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_algorand_type_v1_type_proto_rawDescOnce sync.Once
	file_sf_algorand_type_v1_type_proto_rawDescData = file_sf_algorand_type_v1_type_proto_rawDesc
)

func file_sf_algorand_type_v1_type_proto_rawDescGZIP() []byte {
	file_sf_algorand_type_v1_type_proto_rawDescOnce.Do(func() {
		file_sf_algorand_type_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_algorand_type_v1_type_proto_rawDescData)
	})
	return file_sf_algorand_type_v1_type_proto_rawDescData
}

var file_sf_algorand_type_v1_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sf_algorand_type_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_sf_algorand_type_v1_type_proto_goTypes = []interface{}{
	(ValueDelta_DeltaAction)(0), // 0: sf.algorand.type.v1.ValueDelta.DeltaAction
	(*Block)(nil),               // 1: sf.algorand.type.v1.Block
	(*BlockHeader)(nil),         // 2: sf.algorand.type.v1.BlockHeader
	(*SignedTxnWithAD)(nil),     // 3: sf.algorand.type.v1.SignedTxnWithAD
	(*SignedTxnInBlock)(nil),    // 4: sf.algorand.type.v1.SignedTxnInBlock
	(*SignedTxn)(nil),           // 5: sf.algorand.type.v1.SignedTxn
	(*ApplyData)(nil),           // 6: sf.algorand.type.v1.ApplyData
	(*StateDelta)(nil),          // 7: sf.algorand.type.v1.StateDelta
	(*EvalDelta)(nil),           // 8: sf.algorand.type.v1.EvalDelta
	(*ValueDelta)(nil),          // 9: sf.algorand.type.v1.ValueDelta
	(*LogicSig)(nil),            // 10: sf.algorand.type.v1.LogicSig
	(*MultisigSig)(nil),         // 11: sf.algorand.type.v1.MultisigSig
	(*Transaction)(nil),         // 12: sf.algorand.type.v1.Transaction
	(*AssetParams)(nil),         // 13: sf.algorand.type.v1.AssetParams
	nil,                         // 14: sf.algorand.type.v1.BlockHeader.SptEntry
	(*BlockHeader_StateProofTrackingData)(nil), // 15: sf.algorand.type.v1.BlockHeader.StateProofTrackingData
	nil,                                 // 16: sf.algorand.type.v1.StateDelta.DeltaEntry
	nil,                                 // 17: sf.algorand.type.v1.EvalDelta.LocalDeltasEntry
	(*MultisigSig_MultisigSubsig)(nil),  // 18: sf.algorand.type.v1.MultisigSig.MultisigSubsig
	(*Transaction_StateSchema)(nil),     // 19: sf.algorand.type.v1.Transaction.StateSchema
	(*Transaction_BoxRef)(nil),          // 20: sf.algorand.type.v1.Transaction.BoxRef
	(*Transaction_StateProof)(nil),      // 21: sf.algorand.type.v1.Transaction.StateProof
	(*Transaction_Proof)(nil),           // 22: sf.algorand.type.v1.Transaction.Proof
	(*Transaction_Message)(nil),         // 23: sf.algorand.type.v1.Transaction.Message
	(*Transaction_Reveal)(nil),          // 24: sf.algorand.type.v1.Transaction.Reveal
	(*Transaction_SigSlotCommit)(nil),   // 25: sf.algorand.type.v1.Transaction.SigSlotCommit
	(*Transaction_Participant)(nil),     // 26: sf.algorand.type.v1.Transaction.Participant
	(*Transaction_MerkleSignature)(nil), // 27: sf.algorand.type.v1.Transaction.MerkleSignature
	(*Transaction_MerkleVerifier)(nil),  // 28: sf.algorand.type.v1.Transaction.MerkleVerifier
	nil,                                 // 29: sf.algorand.type.v1.Transaction.StateProof.RevealsEntry
}
var file_sf_algorand_type_v1_type_proto_depIdxs = []int32{
	2,  // 0: sf.algorand.type.v1.Block.header:type_name -> sf.algorand.type.v1.BlockHeader
	4,  // 1: sf.algorand.type.v1.Block.transactions:type_name -> sf.algorand.type.v1.SignedTxnInBlock
	14, // 2: sf.algorand.type.v1.BlockHeader.spt:type_name -> sf.algorand.type.v1.BlockHeader.SptEntry
	3,  // 3: sf.algorand.type.v1.SignedTxnWithAD.stxnad:type_name -> sf.algorand.type.v1.SignedTxnWithAD
	5,  // 4: sf.algorand.type.v1.SignedTxnWithAD.txn:type_name -> sf.algorand.type.v1.SignedTxn
	6,  // 5: sf.algorand.type.v1.SignedTxnWithAD.ad:type_name -> sf.algorand.type.v1.ApplyData
	11, // 6: sf.algorand.type.v1.SignedTxn.mSig:type_name -> sf.algorand.type.v1.MultisigSig
	10, // 7: sf.algorand.type.v1.SignedTxn.lSig:type_name -> sf.algorand.type.v1.LogicSig
	12, // 8: sf.algorand.type.v1.SignedTxn.txn:type_name -> sf.algorand.type.v1.Transaction
	8,  // 9: sf.algorand.type.v1.ApplyData.evalDelta:type_name -> sf.algorand.type.v1.EvalDelta
	16, // 10: sf.algorand.type.v1.StateDelta.delta:type_name -> sf.algorand.type.v1.StateDelta.DeltaEntry
	7,  // 11: sf.algorand.type.v1.EvalDelta.globalDelta:type_name -> sf.algorand.type.v1.StateDelta
	17, // 12: sf.algorand.type.v1.EvalDelta.localDeltas:type_name -> sf.algorand.type.v1.EvalDelta.LocalDeltasEntry
	3,  // 13: sf.algorand.type.v1.EvalDelta.innerTxns:type_name -> sf.algorand.type.v1.SignedTxnWithAD
	0,  // 14: sf.algorand.type.v1.ValueDelta.action:type_name -> sf.algorand.type.v1.ValueDelta.DeltaAction
	11, // 15: sf.algorand.type.v1.LogicSig.msig:type_name -> sf.algorand.type.v1.MultisigSig
	18, // 16: sf.algorand.type.v1.MultisigSig.subsigs:type_name -> sf.algorand.type.v1.MultisigSig.MultisigSubsig
	13, // 17: sf.algorand.type.v1.Transaction.assetParams:type_name -> sf.algorand.type.v1.AssetParams
	20, // 18: sf.algorand.type.v1.Transaction.boxes:type_name -> sf.algorand.type.v1.Transaction.BoxRef
	19, // 19: sf.algorand.type.v1.Transaction.localStateSchema:type_name -> sf.algorand.type.v1.Transaction.StateSchema
	19, // 20: sf.algorand.type.v1.Transaction.globalStateSchema:type_name -> sf.algorand.type.v1.Transaction.StateSchema
	21, // 21: sf.algorand.type.v1.Transaction.stateProof:type_name -> sf.algorand.type.v1.Transaction.StateProof
	23, // 22: sf.algorand.type.v1.Transaction.message:type_name -> sf.algorand.type.v1.Transaction.Message
	15, // 23: sf.algorand.type.v1.BlockHeader.SptEntry.value:type_name -> sf.algorand.type.v1.BlockHeader.StateProofTrackingData
	9,  // 24: sf.algorand.type.v1.StateDelta.DeltaEntry.value:type_name -> sf.algorand.type.v1.ValueDelta
	7,  // 25: sf.algorand.type.v1.EvalDelta.LocalDeltasEntry.value:type_name -> sf.algorand.type.v1.StateDelta
	22, // 26: sf.algorand.type.v1.Transaction.StateProof.sigProofs:type_name -> sf.algorand.type.v1.Transaction.Proof
	22, // 27: sf.algorand.type.v1.Transaction.StateProof.partProofs:type_name -> sf.algorand.type.v1.Transaction.Proof
	29, // 28: sf.algorand.type.v1.Transaction.StateProof.reveals:type_name -> sf.algorand.type.v1.Transaction.StateProof.RevealsEntry
	25, // 29: sf.algorand.type.v1.Transaction.Reveal.sigslotCommit:type_name -> sf.algorand.type.v1.Transaction.SigSlotCommit
	26, // 30: sf.algorand.type.v1.Transaction.Reveal.part:type_name -> sf.algorand.type.v1.Transaction.Participant
	27, // 31: sf.algorand.type.v1.Transaction.SigSlotCommit.sig:type_name -> sf.algorand.type.v1.Transaction.MerkleSignature
	28, // 32: sf.algorand.type.v1.Transaction.Participant.pk:type_name -> sf.algorand.type.v1.Transaction.MerkleVerifier
	22, // 33: sf.algorand.type.v1.Transaction.MerkleSignature.proof:type_name -> sf.algorand.type.v1.Transaction.Proof
	24, // 34: sf.algorand.type.v1.Transaction.StateProof.RevealsEntry.value:type_name -> sf.algorand.type.v1.Transaction.Reveal
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_sf_algorand_type_v1_type_proto_init() }
func file_sf_algorand_type_v1_type_proto_init() {
	if File_sf_algorand_type_v1_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_algorand_type_v1_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTxnWithAD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTxnInBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTxn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisigSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader_StateProofTrackingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisigSig_MultisigSubsig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_StateSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_BoxRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_StateProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Reveal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_SigSlotCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_MerkleSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_algorand_type_v1_type_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_MerkleVerifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_algorand_type_v1_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_algorand_type_v1_type_proto_goTypes,
		DependencyIndexes: file_sf_algorand_type_v1_type_proto_depIdxs,
		EnumInfos:         file_sf_algorand_type_v1_type_proto_enumTypes,
		MessageInfos:      file_sf_algorand_type_v1_type_proto_msgTypes,
	}.Build()
	File_sf_algorand_type_v1_type_proto = out.File
	file_sf_algorand_type_v1_type_proto_rawDesc = nil
	file_sf_algorand_type_v1_type_proto_goTypes = nil
	file_sf_algorand_type_v1_type_proto_depIdxs = nil
}
